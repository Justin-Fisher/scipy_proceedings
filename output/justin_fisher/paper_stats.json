{"abstract": ["There are many well-known benefits of Object Oriented Programming (OOP), including allowing hierarchically classed objects to possess and inherit diverse attributes and methods.  There are also well-known benefits of Numeric Python (NumPy) arrays, including speed, a vast library of powerful functions, and flexible indexing.  Before now, it was quite cumbersome for Python coders to enjoy both sorts of benefits at the same time.  Python's objects offer excellent OOP, but could not easily be used with NumPy.  NumPy's structured record arrays offer NumPy virtues but only a pale approximation of OOP.  NumPy also allows arrays of Python objects, but these provide only fancy indexing, not straightforward access to OOP attributes or methods, nor direct access to the vast library of fast NumPy functions.  Instead, coders who want to enjoy both OOP and NumPy have needed to write many explicit loops/mappings/comprehensions to copy arrayed objects' attributes into NumPy arrays and vice versa.  My free package, ObjArray, offers a solution to this problem, providing NumPy users clean natural access to OOP attributes and methods-{}-for example, people{[} people.age > 18 {]}.height does exactly what you would intuitively expect it should do, namely return a NumPy array of the height attributes of all the people over age 18-{}-all while providing full access to the speed, power, and flexible indexing of NumPy."], "author": ["Justin C. Fisher"], "author_email": ["fisher@smu.edu"], "bibliography": "", "copyright_holder": "Justin C. Fisher.", "author_institution": ["Southern Methodist University, Department of Philosophy"], "video": "", "pages": 5, "authors": "Justin C. Fisher", "title": "ObjArray: Better Integrating Python Objects with NumPy Arrays", "keywords": "Python, NumPy, Object-Oriented, Object, Array, Vectorized"}